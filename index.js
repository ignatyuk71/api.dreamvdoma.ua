// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
require('dotenv').config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î .env –∑–º—ñ–Ω–Ω—ñ

const express = require('express');
const cors = require('cors');
const axios = require('axios');
const app = express();
const port = process.env.PORT || 8080;

// –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É JSON-–∑–∞–ø–∏—Ç—ñ–≤
app.use(express.json());

// üîê Facebook Conversions API: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É —Ç–∞ ID –ø—ñ–∫—Å–µ–ª—è
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
const PIXEL_ID = process.env.PIXEL_ID;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è CORS ‚Äî –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
const corsOptions = {
  origin: 'https://dream-v-doma.com.ua', // –í–∞—à –¥–æ–º–µ–Ω
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization'],
};
app.use(cors(corsOptions));

// üîß –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.post('/test-post', (req, res) => {
  console.log("üì• /test-post –æ—Ç—Ä–∏–º–∞–Ω–æ:", req.body);
  res.json({
    success: true,
    message: '–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
    received: req.body
  });
});


// üéØ –û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ—ó PageView —É Facebook
app.post('/api/pageView', async (req, res) => {
  const data = req.body;
  const event = data?.data?.[0] || {};
  const user = event.user_data || {};

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const ip =
    req.headers['x-forwarded-for']?.split(',')[0] ||
    req.socket?.remoteAddress ||
    null;

  // –§–æ—Ä–º—É—î–º–æ user_data
  const userData = {
    client_user_agent: user.client_user_agent || req.headers['user-agent'],
    fbc: user.fbc || null,
    external_id: user.external_id || "anonymous_user",
    client_ip_address: ip
  };

  if (user.fbp) {
    userData.fbp = user.fbp;
  }

  // –û–±—Ä–æ–±–ª—è—î–º–æ event_source_url —Ç–∞ —á–∏—Å—Ç–∏–º–æ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é, —è–∫—â–æ —î
  const rawEventUrl = event.event_source_url || req.headers.referer || '';
  const cleanEventUrl = rawEventUrl.replace(/;$/, '');

  // –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π URL
  console.log("üåê event_source_url:", cleanEventUrl);

  // –§–æ—Ä–º—É—î–º–æ payload –∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏ Facebook CAPI
  const payload = {
    data: [
      {
        event_name: event.event_name || "PageView",
        event_time: event.event_time || Math.floor(Date.now() / 1000),
        action_source: event.action_source || "website",
        event_id: event.event_id || "event_" + Date.now(),
        event_source_url: cleanEventUrl,
        user_data: userData
      }
    ]
  };
  console.log('üì¶ –ø–∞–∫–µ payload –¥–ª—è Facebook:\n', JSON.stringify(payload, null, 2));
  
  try {
    const fbRes = await axios.post(
      `https://graph.facebook.com/v18.0/${PIXEL_ID}/events?access_token=${ACCESS_TOKEN}`,
      payload,
      { headers: { 'Content-Type': 'application/json' } }
    );

    console.log('‚úÖ Facebook –≤—ñ–¥–ø–æ–≤—ñ–≤ PageView ->');
    res.json({
      success: true,
      message: 'PageView —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ Facebook',
      fb: fbRes.data
    });
  } catch (err) {
    console.error('‚ùå Facebook error:', err.response?.data || err.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è PageView –¥–æ Facebook',
      error: err.response?.data || err.message
    });
  }
});

  

// üõí ViewContent –º–∞—Ä—à—Ä—É—Ç
app.post('/api/viewContent', async (req, res) => {
    //console.log("üì• Incoming POST request: ViewContent");
  
    const data = req.body;
    const event = req.body?.data?.[0] || {};
    const user = event.user_data || {};
    const custom = event.custom_data || {};
  
    const ip =
      req.headers['x-forwarded-for']?.split(',')[0] ||
      req.socket?.remoteAddress ||
      null;
  
    const userData = {
      client_user_agent: user.client_user_agent || req.headers['user-agent'],
      fbc: user.fbc || null,
      external_id: user.external_id || "anonymous_user",
      client_ip_address: ip
    };

    if (user.fbp) {
        userData.fbp = user.fbp; // –î–æ–¥–∞—î–º–æ fbp —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î
      }
      
      console.log('üì¶ –ø–∞–∫–µ payload –¥–ª—è Facebook:\n', JSON.stringify(payload, null, 2));
  
    const payload = {
      data: [
        {
          event_name: event.event_name || "ViewContent",
          event_time: event.event_time || Math.floor(Date.now() / 1000),
          action_source: event.action_source || "website",
          event_id: event.event_id || "event_" + Date.now(),
          event_source_url: event.event_source_url || req.headers.referer || "",
          user_data: userData,
          custom_data: {
            content_ids: custom.content_ids || [],
            content_name: custom.content_name || "",
            content_type: custom.content_type || "product",
            content_category: custom.content_category || "",
            contents: custom.contents || [],
            value: custom.value || 0,
            currency: custom.currency || "UAH"
          }
        }
      ]
    };

    //console.log("üîç custom.content_ids =", custom.content_ids);
    //console.log("üß™ typeof =", typeof custom.content_ids);
    console.log('üì¶ ViewContent payload –¥–ª—è Facebook:\n', JSON.stringify(payload, null, 2));
  
    try {
      const fbRes = await axios.post(
        `https://graph.facebook.com/v18.0/${PIXEL_ID}/events?access_token=${ACCESS_TOKEN}`,
        payload,
        { headers: { 'Content-Type': 'application/json' } }
      );
      console.log("‚úÖ Facebook –≤—ñ–¥–ø–æ–≤—ñ–≤ ViewContent ‚Üí");
      res.json({ success: true, fb: fbRes.data });
    } catch (err) {
      console.error("‚ùå Facebook error (ViewContent):", err.response?.data || err.message);
      res.status(500).json({
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ViewContent –¥–æ Facebook",
        error: err.response?.data || err.message
      });
    }
  });
  

// ‚úÖ AddToCart –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
app.post('/api/addToCart', async (req, res) => {
    const data = req.body;
    const event = data?.data?.[0] || {};
    const user = event.user_data || {};
    const custom = event.custom_data || {};
  
    const ip =
      req.headers['x-forwarded-for']?.split(',')[0] ||
      req.socket?.remoteAddress ||
      null;
  
    // ‚úÖ –§–æ—Ä–º—É—î–º–æ user_data
    const userData = {
      fbc: user.fbc,
      external_id: user.external_id || "anonymous_user",
      client_user_agent: user.client_user_agent || req.headers['user-agent'],
      client_ip_address: ip
    };
  
    if (user.fbp) {
      userData.fbp = user.fbp; // ‚úÖ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î
    }
  
    const payload = {
      data: [
        {
          event_name: event.event_name || "AddToCart",
          event_time: event.event_time || Math.floor(Date.now() / 1000),
          event_id: event.event_id || "event_" + Date.now(),
          action_source: event.action_source || "website",
          event_source_url: event.event_source_url || req.headers.referer || "",
          user_data: userData,
          custom_data: {
            content_ids: custom.content_ids || [],
            content_name: custom.content_name || "",
            content_type: custom.content_type || "product",
            content_category: custom.content_category || "",
            contents: custom.contents || [],
            value: custom.value || 0,
            currency: custom.currency || "UAH"
          }
        }
      ]
    };
    //console.log('üì¶ addtocar payload –¥–ª—è Facebook:\n', JSON.stringify(payload, null, 2));
    try {
      const fbRes = await axios.post(
        `https://graph.facebook.com/v18.0/${PIXEL_ID}/events?access_token=${ACCESS_TOKEN}`,
        payload,
        { headers: { 'Content-Type': 'application/json' } }
      );
  
      console.log("‚úÖ Facebook –≤—ñ–¥–ø–æ–≤—ñ–≤ (AddToCart)->");
      res.json({ success: true, fb: fbRes.data });
    } catch (err) {
      console.error("‚ùå Facebook error (AddToCart):", err.response?.data || err.message);
      res.status(500).json({
        success: false,
        message: "Failed to send AddToCart to Facebook",
        error: err.response?.data || err.message
      });
    }
  });
  


  // üî• Purchase –ø–æ–¥—ñ—è ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ Facebook –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  app.post('/api/purchase', async (req, res) => {
    const data = req.body;
    const event = data?.data?.[0] || {};
    const user = event.user_data || {};
    const custom = event.custom_data || {};
  
    const ip =
      req.headers['x-forwarded-for']?.split(',')[0] ||
      req.socket?.remoteAddress ||
      null;
  
    const userData = {
      client_user_agent: user.client_user_agent || req.headers['user-agent'],
      client_ip_address: ip,
      fbc: user.fbc,
      external_id: user.external_id || "anonymous_user",
      ph: user.ph,
      fn: user.fn,
      ln: user.ln
    };
  
    // –î–æ–¥–∞—î–º–æ fbp, —è–∫—â–æ —î
    if (user.fbp) {
      userData.fbp = user.fbp;
    }
  
    // –î–æ–¥–∞—î–º–æ email, —è–∫—â–æ —î
    if (user.em) {
      userData.em = user.em;
    }
  
    const payload = {
      data: [
        {
          event_name: event.event_name || "Purchase",
          event_time: event.event_time || Math.floor(Date.now() / 1000),
          event_id: event.event_id || "event_" + Date.now(),
          action_source: event.action_source || "website",
          event_source_url: event.event_source_url || req.headers.referer || "",
          user_data: userData,
          custom_data: {
            content_ids: custom.content_ids || [],
            content_type: custom.content_type || "product",
            contents: custom.contents || [],
            value: custom.value || 0,
            currency: "UAH"
          }
        }
      ]
    };
    //console.log('üì¶ PageView payload –¥–ª—è Facebook:\n', JSON.stringify(payload, null, 2));
  
    try {
      const fbRes = await axios.post(
        `https://graph.facebook.com/v18.0/${PIXEL_ID}/events?access_token=${ACCESS_TOKEN}`,
        payload,
        { headers: { 'Content-Type': 'application/json' } }
      );
  
      console.log("‚úÖ Facebook –≤—ñ–¥–ø–æ–≤—ñ–≤ (Purchase):->");
      res.json({ success: true, fb: fbRes.data });
    } catch (err) {
      console.error("‚ùå Facebook error (Purchase):", err.response?.data || err.message);
      res.status(500).json({
        success: false,
        message: "Failed to send Purchase to Facebook",
        error: err.response?.data || err.message
      });
    }
  });
  
  
  

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});